<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/data/jpa 
    http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
    http://www.springframework.org/schema/data/jpa
    http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">


	<!-- 缓存管理器 使用Ehcache实现 -->
	<!-- <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:config/ehcache.xml" />
	</bean> -->

	<!-- <bean id="passwordHelper" class="com.shinowit.framework.security.PasswordHelper"> 
		</bean> -->

	<!-- 凭证匹配器 -->
	<!-- <bean id="credentialsMatcher" class="com.shinowit.framework.security.credentials.RetryLimitSimpleCredentialsMatcher"> 
		<constructor-arg ref="cacheManager" /> <property name="passwordHelper" ref="passwordHelper" 
		/> </bean> -->

	<!-- Realm实现 -->
	<bean id="userRealm" class="framework.system.shiro.UserRealm">
		<property name="cachingEnabled" value="true" />
		<property name="authenticationCachingEnabled" value="true" />
		<property name="authenticationCacheName" value="authenticationCache" />
		<property name="authorizationCachingEnabled" value="true" />
		<property name="authorizationCacheName" value="authorizationCache" />
	</bean>

	<!-- 会话ID生成器 -->
	<bean id="sessionIdGenerator"
		class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />

	<!-- 会话Cookie模板 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="sid" />
		<property name="httpOnly" value="true" />
		<property name="maxAge" value="180000" />
	</bean>

	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="rememberMe" />
		<property name="httpOnly" value="true" />
		<property name="maxAge" value="2592000" />
		<!-- 30天 -->
	</bean>

	<!-- rememberMe管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cipherKey"
			value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}" />
		<property name="cookie" ref="rememberMeCookie" />
	</bean>

	<!-- 会话DAO -->
	<bean id="sessionDAO"
		class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<property name="activeSessionsCacheName" value="shiro-activeSessionCache" />
		<property name="sessionIdGenerator" ref="sessionIdGenerator" />
	</bean>

	<!-- 会话验证调度器 -->
	<bean id="sessionValidationScheduler"
		class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
		<property name="sessionValidationInterval" value="1800000" />
		<property name="sessionManager" ref="sessionManager" />
	</bean>

	<!-- 会话管理器 -->
	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="globalSessionTimeout" value="1800000" />
		<property name="deleteInvalidSessions" value="true" />
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler" />
		<property name="sessionDAO" ref="sessionDAO" />
		<property name="sessionIdCookieEnabled" value="true" />
		<property name="sessionIdCookie" ref="sessionIdCookie" />
	</bean>

	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="userRealm" />
		<property name="sessionManager" ref="sessionManager" />
		<!-- <property name="cacheManager" ref="cacheManager" /> -->
		<property name="rememberMeManager" ref="rememberMeManager" />
	</bean>

	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
			value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>

	<!--下面的loginUrl有两个必要条件,一个登陆校验失败以后会强制客户端redirect到这个url， 另外一个是登陆的表单(含有用户名及密码)必须action到这个url -->
	<!-- 自定义的能够接收校验码的身份验证过滤器 跳转问题太他妈诡异了,不用了，自己写代码控制如何跳转了 <bean id="formAuthenticationFilter" 
		class="com.shinowit.framework.security.filter.ValidFormAuthenticationFilter"> 
		<property name="usernameParam" value="loginName"/> <property name="passwordParam" 
		value="loginPass"/> <property name="loginUrl" value="/login/"/> </bean> -->

	<!-- Shiro的Web过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login.jsp" />
		<property name="unauthorizedUrl" value="/unauthorized.jsp" />
		<property name="filters">
			<map>
				<entry key="authc">
					<bean
						class="org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter" />
				</entry>
			</map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				/login.jsp = anon
				/index.jsp = anon
				/ = anon
				/unauthorized.jsp = anon
				/upload/image/** = anon 
				/static/** = anon
				/ueditor/** = anon
				/site/** = anon
				/verifyCodeServlet = anon
				/sinian/member/memberController/registerMember = anon
				/sinian/member/memberController/memberLogin = anon
				/sinian/member/memberController/memberLogout = anon
				/sinian/carousel/carouselController/queryImgById*  = anon
				/sinian/contact/** = anon
				/sinian/hallDouble/hallDoubleController/toHallDoubleAdd = anon
				/sinian/hallDouble/hallDoubleController/addDoubleHall = anon
				/sinian/hallDouble/hallDoubleController/uploadImg = anon
				/sinian/member/memberController/uploadImg = anon
				/sinian/hall/hallController/toHallSingleAdd = anon
				/sinian/hall/hallController/addSingleHall = anon
				/sinian/hall/hallController/uploadSingleHallImg = anon
				/sinian/oration/orationController/toOrationAdd = anon
				/sinian/oration/orationController/addOration = anon
				/sinian/oration/orationController/uploadImg = anon
				/system/controller/loginController/login = anon
				/system/controller/loginController/logout = anon
				/sinian/member/memberController/updateMember = anon
				/sinian/member/memberController/checkMemberByMemberName = anon
				/sinian/member/memberController/checkMemberByPhone = anon
				/sinian/member/memberController/checkMemberByEmail = anon
				/sinian/carousel/carouselController/queryImgBySingle = anon
				/sinian/product/productController/uploadImg = anon
				/sinian/hallDouble/hallDoubleController/uploadHead1 = anon
				/sinian/hallDouble/hallDoubleController/uploadHead2 = anon
				/sinian/hallDouble/hallDoubleController/updateHallDouble = anon
				/sinian/hall/hallController/updateHall = anon
				/sinian/cart/cartController/deleteCart = anon
				/sinian/warehouse/warehouseController/deleteWarehouse = anon
				/sinian/order/orderController/notifyUrl = anon
				/sinian/order/orderController/notifyUrlForTenpay = anon
				/sinian/order/orderController/returnUrl = anon
				/sinian/templateImg/templateImgController/toSingleTemplateImgChoose = anon
				/sinian/templateImg/templateImgController/toDoubleTemplateImgChoose = anon
				/sinian/templateImg/templateImgController/uploadImg = anon
				/return_url.jsp = anon
				/notify_url.jsp = anon
				/sinian/cart/cartController/addCart = anon
				/sinian/index/** = anon
				/** = authc
				

			</value>
		</property>
	</bean>
    

	<!-- Shiro生命周期处理器 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />


</beans>